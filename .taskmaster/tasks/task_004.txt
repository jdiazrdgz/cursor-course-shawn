# Task ID: 4
# Title: Implement Basic Chat UI Components
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create the core UI components for the chat interface, including message bubbles, input field, and chat container.
# Details:
1. Create message bubble components in components/ui/message-bubble.tsx:
```typescript
import { cn } from '@/lib/utils';
import { Message } from '@/types/database';
import Image from 'next/image';

interface MessageBubbleProps {
  message: Message;
}

export function MessageBubble({ message }: MessageBubbleProps) {
  const isUser = message.role === 'user';
  
  return (
    <div className={cn(
      'flex w-full',
      isUser ? 'justify-end' : 'justify-start'
    )}>
      <div className={cn(
        'max-w-[80%] rounded-lg p-4',
        isUser ? 'bg-primary text-primary-foreground' : 'bg-muted'
      )}>
        {message.message_type === 'text' ? (
          <p className="whitespace-pre-wrap">{message.content}</p>
        ) : (
          <div className="space-y-2">
            <p className="whitespace-pre-wrap">{message.content}</p>
            {message.image_url && (
              <div className="relative aspect-square w-full max-w-sm overflow-hidden rounded-md">
                <Image 
                  src={message.image_url} 
                  alt="Generated image"
                  fill
                  className="object-cover"
                />
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
```
2. Create chat input component in components/chat-input.tsx:
```typescript
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { useState } from 'react';

interface ChatInputProps {
  onSendMessage: (content: string) => void;
  isImageMode: boolean;
  disabled?: boolean;
}

export function ChatInput({ onSendMessage, isImageMode, disabled }: ChatInputProps) {
  const [input, setInput] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim()) {
      onSendMessage(input);
      setInput('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex w-full items-end gap-2">
      <Textarea
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder={isImageMode ? "Describe the image you want to generate..." : "Type your message..."}
        className="min-h-[60px] flex-1 resize-none"
        disabled={disabled}
        onKeyDown={(e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSubmit(e);
          }
        }}
      />
      <Button type="submit" disabled={disabled || !input.trim()}>
        Send
      </Button>
    </form>
  );
}
```
3. Create chat container in components/chat-container.tsx:
```typescript
import { Message } from '@/types/database';
import { MessageBubble } from '@/components/ui/message-bubble';
import { useRef, useEffect } from 'react';

interface ChatContainerProps {
  messages: Message[];
  isLoading?: boolean;
}

export function ChatContainer({ messages, isLoading }: ChatContainerProps) {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (containerRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  }, [messages]);

  return (
    <div 
      ref={containerRef}
      className="flex flex-1 flex-col gap-4 overflow-y-auto p-4"
    >
      {messages.length === 0 ? (
        <div className="flex h-full items-center justify-center">
          <p className="text-muted-foreground">Start a conversation...</p>
        </div>
      ) : (
        messages.map((message) => (
          <MessageBubble key={message.id} message={message} />
        ))
      )}
      {isLoading && (
        <div className="flex justify-start">
          <div className="bg-muted rounded-lg p-4">
            <div className="flex gap-1">
              <div className="h-2 w-2 animate-bounce rounded-full bg-current"></div>
              <div className="h-2 w-2 animate-bounce rounded-full bg-current delay-75"></div>
              <div className="h-2 w-2 animate-bounce rounded-full bg-current delay-150"></div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
```

# Test Strategy:
Test UI components by rendering them with mock data and verifying their appearance. Check responsive behavior on different screen sizes. Verify that the chat input correctly handles user input and submits messages. Test that the message bubbles correctly display different message types (text vs image).
